// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Map.Fort.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Map.Fort {

  /// <summary>Holder for reflection information generated from POGOProtos.Map.Fort.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class POGOProtosMapFortReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos.Map.Fort.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static POGOProtosMapFortReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlQT0dPUHJvdG9zLk1hcC5Gb3J0LnByb3RvEhNQT0dPUHJvdG9zLk1hcC5G",
            "b3J0GhZQT0dPUHJvdG9zLkVudW1zLnByb3RvGh9QT0dPUHJvdG9zLkludmVu",
            "dG9yeS5JdGVtLnByb3RvIrsECghGb3J0RGF0YRIKCgJpZBgBIAEoCRIiChps",
            "YXN0X21vZGlmaWVkX3RpbWVzdGFtcF9tcxgCIAEoAxIQCghsYXRpdHVkZRgD",
            "IAEoARIRCglsb25naXR1ZGUYBCABKAESDwoHZW5hYmxlZBgIIAEoCBIrCgR0",
            "eXBlGAkgASgOMh0uUE9HT1Byb3Rvcy5NYXAuRm9ydC5Gb3J0VHlwZRIyCg1v",
            "d25lZF9ieV90ZWFtGAUgASgOMhsuUE9HT1Byb3Rvcy5FbnVtcy5UZWFtQ29s",
            "b3ISNQoQZ3VhcmRfcG9rZW1vbl9pZBgGIAEoDjIbLlBPR09Qcm90b3MuRW51",
            "bXMuUG9rZW1vbklkEhgKEGd1YXJkX3Bva2Vtb25fY3AYByABKAUSEgoKZ3lt",
            "X3BvaW50cxgKIAEoAxIUCgxpc19pbl9iYXR0bGUYCyABKAgSJgoeY29vbGRv",
            "d25fY29tcGxldGVfdGltZXN0YW1wX21zGA4gASgDEjEKB3Nwb25zb3IYDyAB",
            "KA4yIC5QT0dPUHJvdG9zLk1hcC5Gb3J0LkZvcnRTcG9uc29yEj4KDnJlbmRl",
            "cmluZ190eXBlGBAgASgOMiYuUE9HT1Byb3Rvcy5NYXAuRm9ydC5Gb3J0UmVu",
            "ZGVyaW5nVHlwZRIcChRhY3RpdmVfZm9ydF9tb2RpZmllchgMIAEoDBI0Cgls",
            "dXJlX2luZm8YDSABKAsyIS5QT0dPUHJvdG9zLk1hcC5Gb3J0LkZvcnRMdXJl",
            "SW5mbyKQAQoMRm9ydEx1cmVJbmZvEg8KB2ZvcnRfaWQYASABKAkSFAoMZW5j",
            "b3VudGVyX2lkGAIgASgGEjYKEWFjdGl2ZV9wb2tlbW9uX2lkGAMgASgOMhsu",
            "UE9HT1Byb3Rvcy5FbnVtcy5Qb2tlbW9uSWQSIQoZbHVyZV9leHBpcmVzX3Rp",
            "bWVzdGFtcF9tcxgEIAEoAyKFAQoMRm9ydE1vZGlmaWVyEjIKB2l0ZW1faWQY",
            "ASABKA4yIS5QT0dPUHJvdG9zLkludmVudG9yeS5JdGVtLkl0ZW1JZBIfChdl",
            "eHBpcmF0aW9uX3RpbWVzdGFtcF9tcxgCIAEoAxIgChhkZXBsb3llcl9wbGF5",
            "ZXJfY29kZW5hbWUYAyABKAkibwoLRm9ydFN1bW1hcnkSFwoPZm9ydF9zdW1t",
            "YXJ5X2lkGAEgASgJEiIKGmxhc3RfbW9kaWZpZWRfdGltZXN0YW1wX21zGAIg",
            "ASgDEhAKCGxhdGl0dWRlGAMgASgBEhEKCWxvbmdpdHVkZRgEIAEoASozChFG",
            "b3J0UmVuZGVyaW5nVHlwZRILCgdERUZBVUxUEAASEQoNSU5URVJOQUxfVEVT",
            "VBABKkIKC0ZvcnRTcG9uc29yEhEKDVVOU0VUX1NQT05TT1IQABINCglNQ0RP",
            "TkFMRFMQARIRCg1QT0tFTU9OX1NUT1JFEAIqIwoIRm9ydFR5cGUSBwoDR1lN",
            "EAASDgoKQ0hFQ0tQT0lOVBABUABQAWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Enums.POGOProtosEnumsReflection.Descriptor, global::POGOProtos.Inventory.Item.POGOProtosInventoryItemReflection.Descriptor, },
          new pbr::GeneratedCodeInfo(new[] {typeof(global::POGOProtos.Map.Fort.FortRenderingType), typeof(global::POGOProtos.Map.Fort.FortSponsor), typeof(global::POGOProtos.Map.Fort.FortType), }, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::POGOProtos.Map.Fort.FortData), global::POGOProtos.Map.Fort.FortData.Parser, new[]{ "Id", "LastModifiedTimestampMs", "Latitude", "Longitude", "Enabled", "Type", "OwnedByTeam", "GuardPokemonId", "GuardPokemonCp", "GymPoints", "IsInBattle", "CooldownCompleteTimestampMs", "Sponsor", "RenderingType", "ActiveFortModifier", "LureInfo" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::POGOProtos.Map.Fort.FortLureInfo), global::POGOProtos.Map.Fort.FortLureInfo.Parser, new[]{ "FortId", "EncounterId", "ActivePokemonId", "LureExpiresTimestampMs" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::POGOProtos.Map.Fort.FortModifier), global::POGOProtos.Map.Fort.FortModifier.Parser, new[]{ "ItemId", "ExpirationTimestampMs", "DeployerPlayerCodename" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::POGOProtos.Map.Fort.FortSummary), global::POGOProtos.Map.Fort.FortSummary.Parser, new[]{ "FortSummaryId", "LastModifiedTimestampMs", "Latitude", "Longitude" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum FortRenderingType {
    DEFAULT = 0,
    INTERNAL_TEST = 1,
  }

  public enum FortSponsor {
    UNSET_SPONSOR = 0,
    MCDONALDS = 1,
    POKEMON_STORE = 2,
  }

  public enum FortType {
    GYM = 0,
    CHECKPOINT = 1,
  }

  #endregion

  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FortData : pb::IMessage<FortData> {
    private static readonly pb::MessageParser<FortData> _parser = new pb::MessageParser<FortData>(() => new FortData());
    public static pb::MessageParser<FortData> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Map.Fort.POGOProtosMapFortReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FortData() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FortData(FortData other) : this() {
      id_ = other.id_;
      lastModifiedTimestampMs_ = other.lastModifiedTimestampMs_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
      enabled_ = other.enabled_;
      type_ = other.type_;
      ownedByTeam_ = other.ownedByTeam_;
      guardPokemonId_ = other.guardPokemonId_;
      guardPokemonCp_ = other.guardPokemonCp_;
      gymPoints_ = other.gymPoints_;
      isInBattle_ = other.isInBattle_;
      cooldownCompleteTimestampMs_ = other.cooldownCompleteTimestampMs_;
      sponsor_ = other.sponsor_;
      renderingType_ = other.renderingType_;
      activeFortModifier_ = other.activeFortModifier_;
      LureInfo = other.lureInfo_ != null ? other.LureInfo.Clone() : null;
    }

    public FortData Clone() {
      return new FortData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    public string Id {
      get { return id_; }
      set {
        id_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_modified_timestamp_ms" field.</summary>
    public const int LastModifiedTimestampMsFieldNumber = 2;
    private long lastModifiedTimestampMs_;
    public long LastModifiedTimestampMs {
      get { return lastModifiedTimestampMs_; }
      set {
        lastModifiedTimestampMs_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 3;
    private double latitude_;
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 4;
    private double longitude_;
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    /// <summary>Field number for the "enabled" field.</summary>
    public const int EnabledFieldNumber = 8;
    private bool enabled_;
    public bool Enabled {
      get { return enabled_; }
      set {
        enabled_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 9;
    private global::POGOProtos.Map.Fort.FortType type_ = global::POGOProtos.Map.Fort.FortType.GYM;
    public global::POGOProtos.Map.Fort.FortType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "owned_by_team" field.</summary>
    public const int OwnedByTeamFieldNumber = 5;
    private global::POGOProtos.Enums.TeamColor ownedByTeam_ = global::POGOProtos.Enums.TeamColor.NEUTRAL;
    /// <summary>
    ///  Team that owns the gym
    /// </summary>
    public global::POGOProtos.Enums.TeamColor OwnedByTeam {
      get { return ownedByTeam_; }
      set {
        ownedByTeam_ = value;
      }
    }

    /// <summary>Field number for the "guard_pokemon_id" field.</summary>
    public const int GuardPokemonIdFieldNumber = 6;
    private global::POGOProtos.Enums.PokemonId guardPokemonId_ = global::POGOProtos.Enums.PokemonId.MISSINGNO;
    /// <summary>
    ///  Highest CP Pokemon at the gym
    /// </summary>
    public global::POGOProtos.Enums.PokemonId GuardPokemonId {
      get { return guardPokemonId_; }
      set {
        guardPokemonId_ = value;
      }
    }

    /// <summary>Field number for the "guard_pokemon_cp" field.</summary>
    public const int GuardPokemonCpFieldNumber = 7;
    private int guardPokemonCp_;
    public int GuardPokemonCp {
      get { return guardPokemonCp_; }
      set {
        guardPokemonCp_ = value;
      }
    }

    /// <summary>Field number for the "gym_points" field.</summary>
    public const int GymPointsFieldNumber = 10;
    private long gymPoints_;
    /// <summary>
    ///  Prestigate / experience of the gym
    /// </summary>
    public long GymPoints {
      get { return gymPoints_; }
      set {
        gymPoints_ = value;
      }
    }

    /// <summary>Field number for the "is_in_battle" field.</summary>
    public const int IsInBattleFieldNumber = 11;
    private bool isInBattle_;
    /// <summary>
    ///  Whether someone is battling at the gym currently
    /// </summary>
    public bool IsInBattle {
      get { return isInBattle_; }
      set {
        isInBattle_ = value;
      }
    }

    /// <summary>Field number for the "cooldown_complete_timestamp_ms" field.</summary>
    public const int CooldownCompleteTimestampMsFieldNumber = 14;
    private long cooldownCompleteTimestampMs_;
    /// <summary>
    ///  Timestamp when the pokestop can be activated again to get items / xp
    /// </summary>
    public long CooldownCompleteTimestampMs {
      get { return cooldownCompleteTimestampMs_; }
      set {
        cooldownCompleteTimestampMs_ = value;
      }
    }

    /// <summary>Field number for the "sponsor" field.</summary>
    public const int SponsorFieldNumber = 15;
    private global::POGOProtos.Map.Fort.FortSponsor sponsor_ = global::POGOProtos.Map.Fort.FortSponsor.UNSET_SPONSOR;
    public global::POGOProtos.Map.Fort.FortSponsor Sponsor {
      get { return sponsor_; }
      set {
        sponsor_ = value;
      }
    }

    /// <summary>Field number for the "rendering_type" field.</summary>
    public const int RenderingTypeFieldNumber = 16;
    private global::POGOProtos.Map.Fort.FortRenderingType renderingType_ = global::POGOProtos.Map.Fort.FortRenderingType.DEFAULT;
    public global::POGOProtos.Map.Fort.FortRenderingType RenderingType {
      get { return renderingType_; }
      set {
        renderingType_ = value;
      }
    }

    /// <summary>Field number for the "active_fort_modifier" field.</summary>
    public const int ActiveFortModifierFieldNumber = 12;
    private pb::ByteString activeFortModifier_ = pb::ByteString.Empty;
    /// <summary>
    ///  Might represent the type of item applied to the pokestop, right now only lures can be applied
    /// </summary>
    public pb::ByteString ActiveFortModifier {
      get { return activeFortModifier_; }
      set {
        activeFortModifier_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lure_info" field.</summary>
    public const int LureInfoFieldNumber = 13;
    private global::POGOProtos.Map.Fort.FortLureInfo lureInfo_;
    public global::POGOProtos.Map.Fort.FortLureInfo LureInfo {
      get { return lureInfo_; }
      set {
        lureInfo_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FortData);
    }

    public bool Equals(FortData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (LastModifiedTimestampMs != other.LastModifiedTimestampMs) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      if (Enabled != other.Enabled) return false;
      if (Type != other.Type) return false;
      if (OwnedByTeam != other.OwnedByTeam) return false;
      if (GuardPokemonId != other.GuardPokemonId) return false;
      if (GuardPokemonCp != other.GuardPokemonCp) return false;
      if (GymPoints != other.GymPoints) return false;
      if (IsInBattle != other.IsInBattle) return false;
      if (CooldownCompleteTimestampMs != other.CooldownCompleteTimestampMs) return false;
      if (Sponsor != other.Sponsor) return false;
      if (RenderingType != other.RenderingType) return false;
      if (ActiveFortModifier != other.ActiveFortModifier) return false;
      if (!object.Equals(LureInfo, other.LureInfo)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (LastModifiedTimestampMs != 0L) hash ^= LastModifiedTimestampMs.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      if (Enabled != false) hash ^= Enabled.GetHashCode();
      if (Type != global::POGOProtos.Map.Fort.FortType.GYM) hash ^= Type.GetHashCode();
      if (OwnedByTeam != global::POGOProtos.Enums.TeamColor.NEUTRAL) hash ^= OwnedByTeam.GetHashCode();
      if (GuardPokemonId != global::POGOProtos.Enums.PokemonId.MISSINGNO) hash ^= GuardPokemonId.GetHashCode();
      if (GuardPokemonCp != 0) hash ^= GuardPokemonCp.GetHashCode();
      if (GymPoints != 0L) hash ^= GymPoints.GetHashCode();
      if (IsInBattle != false) hash ^= IsInBattle.GetHashCode();
      if (CooldownCompleteTimestampMs != 0L) hash ^= CooldownCompleteTimestampMs.GetHashCode();
      if (Sponsor != global::POGOProtos.Map.Fort.FortSponsor.UNSET_SPONSOR) hash ^= Sponsor.GetHashCode();
      if (RenderingType != global::POGOProtos.Map.Fort.FortRenderingType.DEFAULT) hash ^= RenderingType.GetHashCode();
      if (ActiveFortModifier.Length != 0) hash ^= ActiveFortModifier.GetHashCode();
      if (lureInfo_ != null) hash ^= LureInfo.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (LastModifiedTimestampMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastModifiedTimestampMs);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Longitude);
      }
      if (OwnedByTeam != global::POGOProtos.Enums.TeamColor.NEUTRAL) {
        output.WriteRawTag(40);
        output.WriteEnum((int) OwnedByTeam);
      }
      if (GuardPokemonId != global::POGOProtos.Enums.PokemonId.MISSINGNO) {
        output.WriteRawTag(48);
        output.WriteEnum((int) GuardPokemonId);
      }
      if (GuardPokemonCp != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(GuardPokemonCp);
      }
      if (Enabled != false) {
        output.WriteRawTag(64);
        output.WriteBool(Enabled);
      }
      if (Type != global::POGOProtos.Map.Fort.FortType.GYM) {
        output.WriteRawTag(72);
        output.WriteEnum((int) Type);
      }
      if (GymPoints != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(GymPoints);
      }
      if (IsInBattle != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsInBattle);
      }
      if (ActiveFortModifier.Length != 0) {
        output.WriteRawTag(98);
        output.WriteBytes(ActiveFortModifier);
      }
      if (lureInfo_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(LureInfo);
      }
      if (CooldownCompleteTimestampMs != 0L) {
        output.WriteRawTag(112);
        output.WriteInt64(CooldownCompleteTimestampMs);
      }
      if (Sponsor != global::POGOProtos.Map.Fort.FortSponsor.UNSET_SPONSOR) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Sponsor);
      }
      if (RenderingType != global::POGOProtos.Map.Fort.FortRenderingType.DEFAULT) {
        output.WriteRawTag(128, 1);
        output.WriteEnum((int) RenderingType);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (LastModifiedTimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModifiedTimestampMs);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      if (Enabled != false) {
        size += 1 + 1;
      }
      if (Type != global::POGOProtos.Map.Fort.FortType.GYM) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (OwnedByTeam != global::POGOProtos.Enums.TeamColor.NEUTRAL) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) OwnedByTeam);
      }
      if (GuardPokemonId != global::POGOProtos.Enums.PokemonId.MISSINGNO) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) GuardPokemonId);
      }
      if (GuardPokemonCp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GuardPokemonCp);
      }
      if (GymPoints != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GymPoints);
      }
      if (IsInBattle != false) {
        size += 1 + 1;
      }
      if (CooldownCompleteTimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CooldownCompleteTimestampMs);
      }
      if (Sponsor != global::POGOProtos.Map.Fort.FortSponsor.UNSET_SPONSOR) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Sponsor);
      }
      if (RenderingType != global::POGOProtos.Map.Fort.FortRenderingType.DEFAULT) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) RenderingType);
      }
      if (ActiveFortModifier.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(ActiveFortModifier);
      }
      if (lureInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LureInfo);
      }
      return size;
    }

    public void MergeFrom(FortData other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.LastModifiedTimestampMs != 0L) {
        LastModifiedTimestampMs = other.LastModifiedTimestampMs;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
      if (other.Enabled != false) {
        Enabled = other.Enabled;
      }
      if (other.Type != global::POGOProtos.Map.Fort.FortType.GYM) {
        Type = other.Type;
      }
      if (other.OwnedByTeam != global::POGOProtos.Enums.TeamColor.NEUTRAL) {
        OwnedByTeam = other.OwnedByTeam;
      }
      if (other.GuardPokemonId != global::POGOProtos.Enums.PokemonId.MISSINGNO) {
        GuardPokemonId = other.GuardPokemonId;
      }
      if (other.GuardPokemonCp != 0) {
        GuardPokemonCp = other.GuardPokemonCp;
      }
      if (other.GymPoints != 0L) {
        GymPoints = other.GymPoints;
      }
      if (other.IsInBattle != false) {
        IsInBattle = other.IsInBattle;
      }
      if (other.CooldownCompleteTimestampMs != 0L) {
        CooldownCompleteTimestampMs = other.CooldownCompleteTimestampMs;
      }
      if (other.Sponsor != global::POGOProtos.Map.Fort.FortSponsor.UNSET_SPONSOR) {
        Sponsor = other.Sponsor;
      }
      if (other.RenderingType != global::POGOProtos.Map.Fort.FortRenderingType.DEFAULT) {
        RenderingType = other.RenderingType;
      }
      if (other.ActiveFortModifier.Length != 0) {
        ActiveFortModifier = other.ActiveFortModifier;
      }
      if (other.lureInfo_ != null) {
        if (lureInfo_ == null) {
          lureInfo_ = new global::POGOProtos.Map.Fort.FortLureInfo();
        }
        LureInfo.MergeFrom(other.LureInfo);
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            LastModifiedTimestampMs = input.ReadInt64();
            break;
          }
          case 25: {
            Latitude = input.ReadDouble();
            break;
          }
          case 33: {
            Longitude = input.ReadDouble();
            break;
          }
          case 40: {
            ownedByTeam_ = (global::POGOProtos.Enums.TeamColor) input.ReadEnum();
            break;
          }
          case 48: {
            guardPokemonId_ = (global::POGOProtos.Enums.PokemonId) input.ReadEnum();
            break;
          }
          case 56: {
            GuardPokemonCp = input.ReadInt32();
            break;
          }
          case 64: {
            Enabled = input.ReadBool();
            break;
          }
          case 72: {
            type_ = (global::POGOProtos.Map.Fort.FortType) input.ReadEnum();
            break;
          }
          case 80: {
            GymPoints = input.ReadInt64();
            break;
          }
          case 88: {
            IsInBattle = input.ReadBool();
            break;
          }
          case 98: {
            ActiveFortModifier = input.ReadBytes();
            break;
          }
          case 106: {
            if (lureInfo_ == null) {
              lureInfo_ = new global::POGOProtos.Map.Fort.FortLureInfo();
            }
            input.ReadMessage(lureInfo_);
            break;
          }
          case 112: {
            CooldownCompleteTimestampMs = input.ReadInt64();
            break;
          }
          case 120: {
            sponsor_ = (global::POGOProtos.Map.Fort.FortSponsor) input.ReadEnum();
            break;
          }
          case 128: {
            renderingType_ = (global::POGOProtos.Map.Fort.FortRenderingType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FortLureInfo : pb::IMessage<FortLureInfo> {
    private static readonly pb::MessageParser<FortLureInfo> _parser = new pb::MessageParser<FortLureInfo>(() => new FortLureInfo());
    public static pb::MessageParser<FortLureInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Map.Fort.POGOProtosMapFortReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FortLureInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FortLureInfo(FortLureInfo other) : this() {
      fortId_ = other.fortId_;
      encounterId_ = other.encounterId_;
      activePokemonId_ = other.activePokemonId_;
      lureExpiresTimestampMs_ = other.lureExpiresTimestampMs_;
    }

    public FortLureInfo Clone() {
      return new FortLureInfo(this);
    }

    /// <summary>Field number for the "fort_id" field.</summary>
    public const int FortIdFieldNumber = 1;
    private string fortId_ = "";
    public string FortId {
      get { return fortId_; }
      set {
        fortId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "encounter_id" field.</summary>
    public const int EncounterIdFieldNumber = 2;
    private ulong encounterId_;
    public ulong EncounterId {
      get { return encounterId_; }
      set {
        encounterId_ = value;
      }
    }

    /// <summary>Field number for the "active_pokemon_id" field.</summary>
    public const int ActivePokemonIdFieldNumber = 3;
    private global::POGOProtos.Enums.PokemonId activePokemonId_ = global::POGOProtos.Enums.PokemonId.MISSINGNO;
    public global::POGOProtos.Enums.PokemonId ActivePokemonId {
      get { return activePokemonId_; }
      set {
        activePokemonId_ = value;
      }
    }

    /// <summary>Field number for the "lure_expires_timestamp_ms" field.</summary>
    public const int LureExpiresTimestampMsFieldNumber = 4;
    private long lureExpiresTimestampMs_;
    public long LureExpiresTimestampMs {
      get { return lureExpiresTimestampMs_; }
      set {
        lureExpiresTimestampMs_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FortLureInfo);
    }

    public bool Equals(FortLureInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FortId != other.FortId) return false;
      if (EncounterId != other.EncounterId) return false;
      if (ActivePokemonId != other.ActivePokemonId) return false;
      if (LureExpiresTimestampMs != other.LureExpiresTimestampMs) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (FortId.Length != 0) hash ^= FortId.GetHashCode();
      if (EncounterId != 0UL) hash ^= EncounterId.GetHashCode();
      if (ActivePokemonId != global::POGOProtos.Enums.PokemonId.MISSINGNO) hash ^= ActivePokemonId.GetHashCode();
      if (LureExpiresTimestampMs != 0L) hash ^= LureExpiresTimestampMs.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FortId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FortId);
      }
      if (EncounterId != 0UL) {
        output.WriteRawTag(17);
        output.WriteFixed64(EncounterId);
      }
      if (ActivePokemonId != global::POGOProtos.Enums.PokemonId.MISSINGNO) {
        output.WriteRawTag(24);
        output.WriteEnum((int) ActivePokemonId);
      }
      if (LureExpiresTimestampMs != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(LureExpiresTimestampMs);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (FortId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FortId);
      }
      if (EncounterId != 0UL) {
        size += 1 + 8;
      }
      if (ActivePokemonId != global::POGOProtos.Enums.PokemonId.MISSINGNO) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ActivePokemonId);
      }
      if (LureExpiresTimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LureExpiresTimestampMs);
      }
      return size;
    }

    public void MergeFrom(FortLureInfo other) {
      if (other == null) {
        return;
      }
      if (other.FortId.Length != 0) {
        FortId = other.FortId;
      }
      if (other.EncounterId != 0UL) {
        EncounterId = other.EncounterId;
      }
      if (other.ActivePokemonId != global::POGOProtos.Enums.PokemonId.MISSINGNO) {
        ActivePokemonId = other.ActivePokemonId;
      }
      if (other.LureExpiresTimestampMs != 0L) {
        LureExpiresTimestampMs = other.LureExpiresTimestampMs;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FortId = input.ReadString();
            break;
          }
          case 17: {
            EncounterId = input.ReadFixed64();
            break;
          }
          case 24: {
            activePokemonId_ = (global::POGOProtos.Enums.PokemonId) input.ReadEnum();
            break;
          }
          case 32: {
            LureExpiresTimestampMs = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FortModifier : pb::IMessage<FortModifier> {
    private static readonly pb::MessageParser<FortModifier> _parser = new pb::MessageParser<FortModifier>(() => new FortModifier());
    public static pb::MessageParser<FortModifier> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Map.Fort.POGOProtosMapFortReflection.Descriptor.MessageTypes[2]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FortModifier() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FortModifier(FortModifier other) : this() {
      itemId_ = other.itemId_;
      expirationTimestampMs_ = other.expirationTimestampMs_;
      deployerPlayerCodename_ = other.deployerPlayerCodename_;
    }

    public FortModifier Clone() {
      return new FortModifier(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private global::POGOProtos.Inventory.Item.ItemId itemId_ = global::POGOProtos.Inventory.Item.ItemId.ITEM_UNKNOWN;
    public global::POGOProtos.Inventory.Item.ItemId ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "expiration_timestamp_ms" field.</summary>
    public const int ExpirationTimestampMsFieldNumber = 2;
    private long expirationTimestampMs_;
    public long ExpirationTimestampMs {
      get { return expirationTimestampMs_; }
      set {
        expirationTimestampMs_ = value;
      }
    }

    /// <summary>Field number for the "deployer_player_codename" field.</summary>
    public const int DeployerPlayerCodenameFieldNumber = 3;
    private string deployerPlayerCodename_ = "";
    public string DeployerPlayerCodename {
      get { return deployerPlayerCodename_; }
      set {
        deployerPlayerCodename_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FortModifier);
    }

    public bool Equals(FortModifier other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ExpirationTimestampMs != other.ExpirationTimestampMs) return false;
      if (DeployerPlayerCodename != other.DeployerPlayerCodename) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != global::POGOProtos.Inventory.Item.ItemId.ITEM_UNKNOWN) hash ^= ItemId.GetHashCode();
      if (ExpirationTimestampMs != 0L) hash ^= ExpirationTimestampMs.GetHashCode();
      if (DeployerPlayerCodename.Length != 0) hash ^= DeployerPlayerCodename.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != global::POGOProtos.Inventory.Item.ItemId.ITEM_UNKNOWN) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ItemId);
      }
      if (ExpirationTimestampMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ExpirationTimestampMs);
      }
      if (DeployerPlayerCodename.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DeployerPlayerCodename);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ItemId != global::POGOProtos.Inventory.Item.ItemId.ITEM_UNKNOWN) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemId);
      }
      if (ExpirationTimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTimestampMs);
      }
      if (DeployerPlayerCodename.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeployerPlayerCodename);
      }
      return size;
    }

    public void MergeFrom(FortModifier other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != global::POGOProtos.Inventory.Item.ItemId.ITEM_UNKNOWN) {
        ItemId = other.ItemId;
      }
      if (other.ExpirationTimestampMs != 0L) {
        ExpirationTimestampMs = other.ExpirationTimestampMs;
      }
      if (other.DeployerPlayerCodename.Length != 0) {
        DeployerPlayerCodename = other.DeployerPlayerCodename;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemId_ = (global::POGOProtos.Inventory.Item.ItemId) input.ReadEnum();
            break;
          }
          case 16: {
            ExpirationTimestampMs = input.ReadInt64();
            break;
          }
          case 26: {
            DeployerPlayerCodename = input.ReadString();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FortSummary : pb::IMessage<FortSummary> {
    private static readonly pb::MessageParser<FortSummary> _parser = new pb::MessageParser<FortSummary>(() => new FortSummary());
    public static pb::MessageParser<FortSummary> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Map.Fort.POGOProtosMapFortReflection.Descriptor.MessageTypes[3]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FortSummary() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FortSummary(FortSummary other) : this() {
      fortSummaryId_ = other.fortSummaryId_;
      lastModifiedTimestampMs_ = other.lastModifiedTimestampMs_;
      latitude_ = other.latitude_;
      longitude_ = other.longitude_;
    }

    public FortSummary Clone() {
      return new FortSummary(this);
    }

    /// <summary>Field number for the "fort_summary_id" field.</summary>
    public const int FortSummaryIdFieldNumber = 1;
    private string fortSummaryId_ = "";
    public string FortSummaryId {
      get { return fortSummaryId_; }
      set {
        fortSummaryId_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "last_modified_timestamp_ms" field.</summary>
    public const int LastModifiedTimestampMsFieldNumber = 2;
    private long lastModifiedTimestampMs_;
    public long LastModifiedTimestampMs {
      get { return lastModifiedTimestampMs_; }
      set {
        lastModifiedTimestampMs_ = value;
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 3;
    private double latitude_;
    public double Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "longitude" field.</summary>
    public const int LongitudeFieldNumber = 4;
    private double longitude_;
    public double Longitude {
      get { return longitude_; }
      set {
        longitude_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FortSummary);
    }

    public bool Equals(FortSummary other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FortSummaryId != other.FortSummaryId) return false;
      if (LastModifiedTimestampMs != other.LastModifiedTimestampMs) return false;
      if (Latitude != other.Latitude) return false;
      if (Longitude != other.Longitude) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (FortSummaryId.Length != 0) hash ^= FortSummaryId.GetHashCode();
      if (LastModifiedTimestampMs != 0L) hash ^= LastModifiedTimestampMs.GetHashCode();
      if (Latitude != 0D) hash ^= Latitude.GetHashCode();
      if (Longitude != 0D) hash ^= Longitude.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FortSummaryId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FortSummaryId);
      }
      if (LastModifiedTimestampMs != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LastModifiedTimestampMs);
      }
      if (Latitude != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Latitude);
      }
      if (Longitude != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Longitude);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (FortSummaryId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FortSummaryId);
      }
      if (LastModifiedTimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastModifiedTimestampMs);
      }
      if (Latitude != 0D) {
        size += 1 + 8;
      }
      if (Longitude != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    public void MergeFrom(FortSummary other) {
      if (other == null) {
        return;
      }
      if (other.FortSummaryId.Length != 0) {
        FortSummaryId = other.FortSummaryId;
      }
      if (other.LastModifiedTimestampMs != 0L) {
        LastModifiedTimestampMs = other.LastModifiedTimestampMs;
      }
      if (other.Latitude != 0D) {
        Latitude = other.Latitude;
      }
      if (other.Longitude != 0D) {
        Longitude = other.Longitude;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            FortSummaryId = input.ReadString();
            break;
          }
          case 16: {
            LastModifiedTimestampMs = input.ReadInt64();
            break;
          }
          case 25: {
            Latitude = input.ReadDouble();
            break;
          }
          case 33: {
            Longitude = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
