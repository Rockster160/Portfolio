<%= meta_title @task.name, include_name: false %>

<div class="skinny-container lists-index-container">
  <div class="btn-container flex-justify-space-between">
    <a href="<%= jil_tasks_path %>" class="btn">All Tasks</a>
    <a href="<%= jil_task_path(@task) %>" class="btn">Edit Task</a>
  </div>

  <div class="list-title"><%= @task.name %></div>

  <div class="task-trigger-btns">
    <%= render partial: "jil/tasks/trigger", locals: { task: @task, title: "Trigger Now" } %>
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", function() {
    const executeWrapper = document.querySelector(".execute-btn-wrapper");
    const executeBtn = executeWrapper.querySelector(".execute-btn");
    if (executeBtn) {
      executeBtn.addEventListener("click", function() {
        executeBtn.style.pointerEvents = "none";
        executeBtn.classList.add("disabled");
      });
    } else {
      return
    }

    if (executeWrapper.dataset.type === "monitor") {
      const monitorKey = executeWrapper.dataset.monitor
      let monitor = undefined
      let synced = false
      let syncInterval = undefined
      monitor = Monitor.subscribe(monitorKey, {
        connected: function() {
          monitor?.resync()
          syncInterval = setInterval(() => {
            if (!synced) {
              console.log("resyncing monitor...");
              monitor?.resync()
            }
          }, 1000);
        },
        received: function(json) {
          synced = true
          clearInterval(syncInterval)
          if (json?.data?.text) {
            executeBtn.querySelector(".execute-btn-title").textContent = json.data.text
          }
          if (json?.data?.color) {
            executeWrapper.style.setProperty("--btn-color", json.data.color)
          }
        },
      })
    }
  });

  document.addEventListener("ajax:success", function(event) {
    const wrapper = event.target.closest(".execute-btn-wrapper");
    const executeBtn = wrapper ? wrapper.querySelector(".execute-btn") : null;

    if (executeBtn) {
      executeBtn.style.pointerEvents = "";
      executeBtn.classList.remove("disabled");
    }

    if (wrapper) {
      const msg = document.createElement("div");
      msg.textContent = "Triggered!";
      msg.className = "execute-success-msg";
      wrapper.appendChild(msg);
      setTimeout(() => msg.remove(), 1500);
    }
  }, true);
</script>
