<!-- app/views/meals/new.html.erb -->
<% content_for :title, "Meal Calorie Tracker" %>
<% content_for :modals do %>
  <div id="cmodal-backdrop" class="cmodal-backdrop hidden">
    <div class="cmodal">
      <h3 id="cmodal-title">Edit Item</h3>
      <div class="row">
        <input id="m-name" placeholder="Name">
        <input id="m-cal" class="sm" type="number" placeholder="Calories">
      </div>
      <div class="row">
        <input id="m-img" placeholder="Image URL or emoji">
      </div>
      <div class="cmodal-actions">
        <button id="m-delete" class="danger" type="button">Delete</button>
        <div class="spacer"></div>
        <button id="m-cancel" type="button">Cancel</button>
        <button id="m-save" class="ok" type="button">Save</button>
      </div>
    </div>
  </div>
<% end %>

<div class="wrap" data-save-url="<%= meal_builder_user_dashboard_path %>">
  <div class="topbar">
    <button id="toggle-edit" type="button">Edit</button>
    <button id="save-items" type="button" class="hidden">Save</button>
    <button id="add-item" type="button" class="hidden">Add Item</button>

    <input id="search" type="text" placeholder="Search food..." autocomplete="off">
    <button id="submit" class="primary" disabled>Submit</button>
  </div>
  <div id="grid" class="grid"></div>
</div>

<% content_for :after_body do %>
  <script id="items-data" type="application/json">
    <%= raw(@items.to_json) %>
  </script>

  <style>
    html, body { margin: 0; padding: 0; font-family: system-ui, -apple-system, Segoe UI, Roboto; }
    .wrap { max-width: 1100px; margin: 0 auto; padding: 16px 20px 28px }
    .topbar { display: flex; gap: 12px; align-items: center; margin-bottom: 12px }
    input[type="text"] {
      flex: 1; padding: 10px 12px; font-size: 16px; border: 1px solid #CCC;
      border-radius: 8px; outline: none
    }
    button {
      padding: inherit;
    }
    button.primary {
      padding: 10px 14px; font-size: 16px; border: none; border-radius: 8px;
      background: #2563EB; color: black; cursor: pointer
    }
    button.primary:disabled { opacity: .5; cursor: default }
    .grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
      gap: 12px
    }
    .card-styles {
      color: #ECF0F1;
      border-width: 1px;
      border-style: solid;
      border-color: #D5E5FF;
      border-image: initial;
      background: #00102B;
    }
    .card {
      position: relative; border: 1px solid #E5E7EB; border-radius: 12px;
      padding: 10px; display: flex; flex-direction: column; gap: 8px;
      align-items: center; justify-content: space-between; background: #00102B;
      transition: transform .08s ease, box-shadow .08s ease
    }
    .card:hover { transform: translateY(-1px); box-shadow: 0 2px 10px #0001 }
    .card.selected { outline: 2px solid #22C55E; background: #0C3A30 }
    .imgbox {
      font-size: 72px;
      width: 100%; aspect-ratio: 1 / 1; border-radius: 10px; background: #D5E5FF;
      display: grid; place-items: center; overflow: hidden
    }
    .imgbox img { width: 100%; height: 100%; object-fit: cover }
    .title { text-align: center; font-size: 14px; line-height: 1.2 }
    .cal { font-size: 12px; color: #6B7280 }
    .controls {
      display: flex; gap: 8px; align-items: center; justify-content: center;
      margin-top: 2px
    }
    .pill {
      min-width: 28px; height: 28px; border-radius: 999px; border: 1px solid #D1D5DB;
      background: #FFF; cursor: pointer; display: grid; place-items: center;
      font-weight: 600
    }
    .count { min-width: 28px; text-align: center }
    .sticky-note {
      position: absolute; top: 8px; left: 8px; font-size: 12px;
      background: #22C55E; color: #FFF; padding: 2px 6px; border-radius: 999px
    }

    .editing .card { cursor: grab }
    .editing .card:active { cursor: grabbing }

    .card-overlay {
      position: absolute; inset: 0;
      background: #0008; border-radius: 12px;
      display: grid; place-items: center; text-align: center;
      color: #ECF0F1; font-weight: 600; font-size: 14px;
      pointer-events: auto
    }
    .card-overlay .hint {
      padding: 6px 10px; border-radius: 999px;
      background: #2563EB; color: #FFF
    }

    .drag-placeholder {
      border: 2px dashed #93C5FD;
      background: #EFF6FF;
      border-radius: 12px;
      height: 100%;
      min-height: 160px;
    }

    .dragging { opacity: .3 }

    .row { display: flex; gap: 8px; width: 100% }
    .row input {
      flex: 1; padding: 8px 10px; border: 1px solid #CCC; border-radius: 6px
    }
    .row .sm { max-width: 130px }

    .cmodal-backdrop {
      position: fixed; inset: 0; background: #0008;
      display: grid; place-items: center; z-index: 1000
    }
    .cmodal {
      width: min(560px, 92vw); background: #00102B; color: #ECF0F1;
      border: 1px solid #D5E5FF; border-radius: 12px; padding: 16px
    }
    .cmodal h3 { margin: 0 0 10px 0; font-size: 18px }
    .cmodal-actions {
      display: flex; align-items: center; gap: 8px; margin-top: 12px
    }
    .cmodal .ok, .cmodal .danger, .cmodal button {
      border: none; border-radius: 8px; padding: 8px 12px; cursor: pointer
    }
    .cmodal .ok { background: #2563EB; color: #FFF }
    .cmodal .danger { background: #991B1B; color: #FFF }
    .cmodal .spacer { flex: 1 }

    .hidden { display: none }
  </style>

  <script>
    let ITEMS = JSON.parse(
      document.getElementById("items-data").textContent || "[]"
    )

    const picked = new Map()
    let query = ""
    let editMode = false

    const elGrid = document.getElementById("grid")
    const elSearch = document.getElementById("search")
    const elSubmit = document.getElementById("submit")
    const elToggleEdit = document.getElementById("toggle-edit")
    const elAddItem = document.getElementById("add-item")
    const elSaveItems = document.getElementById("save-items")
    const SAVE_ENDPOINT = document.querySelector(".wrap")?.dataset.saveUrl

    // cmodal bits
    const elcModal = document.getElementById("cmodal-backdrop")
    const mTitle = document.getElementById("cmodal-title")
    const mName = document.getElementById("m-name")
    const mCal = document.getElementById("m-cal")
    const mImg = document.getElementById("m-img")
    const mSave = document.getElementById("m-save")
    const mCancel = document.getElementById("m-cancel")
    const mDelete = document.getElementById("m-delete")
    let cmodalItemId = null
    let isNewItem = false

    const csrfToken = () => {
      const m = document.querySelector('meta[name="csrf-token"]')
      return m ? m.content : ""
    }

    const uid = () => Math.random().toString(36).slice(2, 8)

    const fuzzyMatch = (needle, hay) => {
      if (!needle) return true
      let i = 0, j = 0
      const n = needle.toLowerCase(), h = hay.toLowerCase()
      while (i < n.length && j < h.length) { if (n[i] === h[j]) i++; j++ }
      return i === n.length
    }

    const computeView = () => ITEMS.filter(it => fuzzyMatch(query, it.name))
    const updateSubmit = () => { elSubmit.disabled = picked.size === 0 }

    const upsertItem = (id, attrs) => {
      const idx = ITEMS.findIndex(x => x.id === id)
      if (idx === -1) return
      ITEMS[idx] = { ...ITEMS[idx], ...attrs }
    }

    const deleteItem = id => {
      ITEMS = ITEMS.filter(x => x.id !== id)
      picked.delete(id)
    }

    // ---------- Drag & drop reorder (with visible placeholder) ----------
    let dragFromIdx = null
    let placeholder = null

    const startDrag = (index, card) => {
      dragFromIdx = index
      card.classList.add("dragging")
      placeholder = document.createElement("div")
      placeholder.className = "card drag-placeholder"
      placeholder.style.height = `${card.offsetHeight}px`
      elGrid.insertBefore(placeholder, card.nextSibling)
    }

    const movePlaceholder = targetCard => {
      if (!placeholder || !targetCard || targetCard === placeholder) return
      const rect = targetCard.getBoundingClientRect()
      const before = (event.clientY - rect.top) < rect.height / 2
      if (before) elGrid.insertBefore(placeholder, targetCard)
      else elGrid.insertBefore(placeholder, targetCard.nextSibling)
    }

    const finishDrag = draggedCard => {
      if (dragFromIdx == null || !placeholder) return
      const cards = Array.from(elGrid.children)
        .filter(n => n.classList.contains("card"))
      const toIdx = cards.indexOf(placeholder)
      if (toIdx >= 0 && toIdx !== dragFromIdx) {
        const moved = ITEMS.splice(dragFromIdx, 1)[0]
        ITEMS.splice(toIdx, 0, moved)
      }
      draggedCard.classList.remove("dragging")
      placeholder.remove()
      placeholder = null
      dragFromIdx = null
      render()
    }

    // ---------- cModal ----------
    const opencModal = item => {
      cmodalItemId = item?.id || `item-${uid()}`
      isNewItem = !item
      mTitle.textContent = isNewItem ? "Add Item" : "Edit Item"
      mName.value = item?.name || ""
      mCal.value = item?.cal != null ? String(item.cal) : ""
      mImg.value = item?.img || ""
      mDelete.classList.toggle("hidden", isNewItem)
      elcModal.classList.remove("hidden")
      setTimeout(() => mName.focus(), 0)
    }

    const closecModal = () => {
      elcModal.classList.add("hidden")
      cmodalItemId = null
      isNewItem = false
    }

    mCancel.addEventListener("click", () => closecModal())

    mSave.addEventListener("click", () => {
      const name = mName.value.trim() || "Untitled"
      const calVal = parseInt(mCal.value || "0", 10)
      const cal = Math.max(0, Number.isFinite(calVal) ? calVal : 0)
      const img = mImg.value.trim()

      if (isNewItem) {
        ITEMS.push({ id: cmodalItemId, name, cal, img })
      } else {
        upsertItem(cmodalItemId, { name, cal, img })
      }
      closecModal()
      render()
    })

    mDelete.addEventListener("click", () => {
      if (!cmodalItemId) return
      deleteItem(cmodalItemId)
      closecModal()
      render()
    })

    elcModal.addEventListener("click", e => {
      if (e.target === elcModal) closecModal()
    })

    // ---------- Render ----------
    const render = () => {
      document.body.classList.toggle("editing", editMode)
      elAddItem.classList.toggle("hidden", !editMode)
      elSaveItems.classList.toggle("hidden", !editMode)

      elGrid.innerHTML = ""
      const view = computeView()

      view.forEach(it => {
        const isSel = picked.has(it.id)
        const count = picked.get(it.id) || 0
        const index = ITEMS.findIndex(x => x.id === it.id)

        const card = document.createElement("div")
        card.className = `card${isSel ? " selected" : ""}`
        card.dataset.id = it.id

        // drag
        if (editMode) {
          card.setAttribute("draggable", "true")
          card.addEventListener("dragstart", e => startDrag(index, card))
          card.addEventListener("dragend", e => finishDrag(card))
          card.addEventListener("dragover", e => e.preventDefault())
          card.addEventListener("dragenter", e => {
            e.preventDefault()
            movePlaceholder(card)
          })
        }

        const imgbox = document.createElement("div")
        imgbox.className = "imgbox"
        if (it.img && /^(https?:|\/)/.test(it.img)) {
          const img = document.createElement("img")
          img.src = it.img
          img.alt = it.name
          imgbox.appendChild(img)
        } else {
          imgbox.textContent = it.img && it.img.trim() ? it.img : "🍽️"
        }

        const title = document.createElement("div")
        title.className = "title"
        title.textContent = it.name

        const cal = document.createElement("div")
        cal.className = "cal"
        cal.textContent = `${it.cal} cal`

        const controls = document.createElement("div")
        controls.className = "controls"

        const minus = document.createElement("button")
        minus.className = "pill"
        minus.type = "button"
        minus.textContent = "-"
        minus.addEventListener("click", e => {
          e.stopPropagation()
          const cur = picked.get(it.id) || 0
          if (cur > 1) picked.set(it.id, cur - 1)
          else picked.delete(it.id)
          updateSubmit()
          render()
        })

        const cnt = document.createElement("div")
        cnt.className = "count"
        cnt.textContent = String(count)

        const plus = document.createElement("button")
        plus.className = "pill"
        plus.type = "button"
        plus.textContent = "+"
        plus.addEventListener("click", e => {
          e.stopPropagation()
          const cur = picked.get(it.id) || 0
          picked.set(it.id, cur + 1)
          updateSubmit()
          render()
        })

        controls.appendChild(minus)
        controls.appendChild(cnt)
        controls.appendChild(plus)

        if (editMode) {
          card.addEventListener("click", e => {
            e.preventDefault()
            opencModal(it)
          })
        } else {
          if (isSel) {
            const badge = document.createElement("div")
            badge.className = "sticky-note"
            badge.textContent = "Added"
            card.appendChild(badge)
          }
          card.addEventListener("click", () => {
            const cur = picked.get(it.id) || 0
            picked.set(it.id, cur + 1)
            updateSubmit()
            render()
          })
        }

        card.appendChild(imgbox)
        card.appendChild(title)
        card.appendChild(cal)
        card.appendChild(controls)

        if (editMode) {
          const overlay = document.createElement("div")
          overlay.className = "card-overlay"
          const hint = document.createElement("div")
          hint.className = "hint"
          hint.textContent = "✏️"
          overlay.appendChild(hint)

          // overlay blocks interactions; clicking it opens the modal
          overlay.addEventListener("click", e => {
            e.preventDefault()
            opencModal(it)
          })

          card.appendChild(overlay)
        }

        elGrid.appendChild(card)
      })
    }

    // ---------- Search / Submit / Edit toggle / Add / Save ----------
    elSearch.addEventListener("input", e => {
      query = e.target.value.trim()
      render()
    })

    elSubmit.addEventListener("click", () => {
      const parts = []
      let total = 0
      for (const [id, count] of picked.entries()) {
        const it = ITEMS.find(x => x.id === id)
        if (!it) continue
        const label = count > 1 ? `${it.name} x${count}` : it.name
        parts.push(label)
        total += it.cal * count
      }
      const text = `${parts.join(", ")} (${total})`
      console.log(text)
    })

    elToggleEdit.addEventListener("click", () => {
      editMode = !editMode
      elToggleEdit.textContent = editMode ? "Done" : "Edit"
      render()
    })

    elAddItem.addEventListener("click", () => opencModal(null))

    const normalizeItems = items => {
      return items.map(it => ({
        id: String(it.id || "").trim() || uid(),
        name: String(it.name || "Untitled").trim(),
        cal: Math.max(0, parseInt(it.cal ?? 0, 10) || 0),
        img: (it.img || "").toString().trim()
      }))
    }

    elSaveItems.addEventListener("click", async () => {
      const payload = { items: normalizeItems(ITEMS) }

      const res = await fetch(SAVE_ENDPOINT, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "X-CSRF-Token": csrfToken(),
          "Accept": "application/json"
        },
        body: JSON.stringify(payload),
        credentials: "same-origin"
      })

      if (res.ok) {
        location.reload()
        return
      }

      const err = await res.text().catch(() => "")
      console.error("Save failed", res.status, err)
      alert("Save failed")
    })

    // ---------- Boot ----------
    document.addEventListener("DOMContentLoaded", () => {
      render()
      updateSubmit()
    })
  </script>
<% end %>
