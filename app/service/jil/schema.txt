*[Object]
  .inspect::None
  .presence::Any
*[Keyword]
  Object::Any
  Key::String
  Value::Any
  Index::Numeric
  Break("Break" TAB Any)::Any
  Next("Next" TAB Any)::Any
  Item::Any
  ItemKey(String:Key)::Any
  Arg(String:Name)::Any
  FuncReturn("Return" TAB Any)::Any
[Global]
  #input_data("Input Data")::Hash
  #return(Any?)
  #params::Array
  #functionParams(content([Keyword.Item]))::Array # Used in Function TASKS, not inline functions
  #if("IF" content "DO" content "ELSE" content)::Any
  #ternary(Boolean|Any " ? " Any " : " Any)::Any # Useful for setting vars
  #ref(Any)::Any // Variable reference, returns the variable itself, does NOT evaluate it.
  #get(String)::Any // Variable reference
  #set!(String "=" Any)::Any
  #get_cache(String:"Cache Key" Any)::Any // Could Cache.get be a non-object Class? Doesn't show up in return-types, but is still a class for organization
  #dig_cache(String:"Cache Key" content(Keyval [Keyval.new]))::Any
  #set_cache(String:"Cache Key" Any "=" Any)::Any
  #exit
  #print(Text)::String
  #comment(Text)::None
  #command(String)::String
  #commandAt(Date Text)::Schedule
  #request("Method" String BR "URL" String BR "Params" Hash BR "Headers" Hash)::Hash
  #broadcast_websocket("Channel" TAB String BR "Data" TAB Hash)::Numeric
  #trigger(String TAB Date content(Keyval|Hash [Keyval.new]))::Schedule
  #triggerWith(String TAB Date BR "" TAB Hash)::Schedule
  #triggerNow(String TAB Hash)::Array
  !#triggerRaw(Hash)::Array # Should this just be a trigger class?
  !#triggerVia(String)::Array # "command.say.'blah blah blah'"
  #relay(Contact|String content(Hash|Keyval [Keyval.new]))::None # String is contact name/username/alias/id
  #dowhile(enum_content)::Numeric
  #loop(enum_content)::Any
  #times(Numeric enum_content)::Numeric
  #stop_propagation()::Boolean
  #block(content)::Any
  #function("function(" String:"Arg Names" ")" content(Any [Keyword.Arg Keyword.FuncReturn]))::Function
[Function]
  .call(content)::Any
[Keyval]
  #new(String ": " Any)
  #keyHash(String ": " content(Keyval [Keyval.new]))
[Text]::textarea
  #new(Text)::String
[String]::text
  #new(Any)
  .match(String)
  .scan(String)::Array
  .split(String?)::Array
  .format(["lower" "upper" "squish" "capital" "capitalize_first" "pascal" "title" "snake" "camel" "base64"])
  .replace(String "with" String)
  .add("+" String)
  .length()::Numeric
[Numeric]::number
  #new(Any::Numeric)
  !#pi(TAB "Ï€" TAB)
  !#e(TAB "e" TAB)
  !#inf()
  #random(Numeric(0):min "-" Numeric(10):max TAB "Decimal:" Numeric?(0):figures)
  #op(Numeric ["+" "-" "*" "/" "%" "^log"] Numeric)
  #evaluate(Text)
  .round(Numeric(0))
  .floor
  .ceil
  .op(["+" "-" "*" "/" "%" "^log"] Numeric)
  .op!(["+=" "-=" "*=" "/=" "%="] Numeric)
  .abs
  !.sqrt
  !.squared
  !.cubed
  !.log(Numeric)
  !.root(Numeric)
  !.exp(Numeric)
  .even?::Boolean
  .odd?::Boolean
  !.prime?::Boolean
  !.whole?::Boolean
  .zero?::Boolean
  .positive?::Boolean
  .negative?::Boolean
[Boolean]::checkbox
  #new(Any::Boolean)
  #eq(Any "==" Any)
  #or(Any "||" Any)
  #and(Any "&&" Any)
  #not("NOT" Any)
  #compare(Any ["==" "!=" ">" "<" ">=" "<="] Any)
[Date]::datetime-local
  #new(Numeric:year Numeric:month Numeric:day Numeric:hour Numeric:min Numeric:sec)
  #now
  #ago(Numeric ["seconds" "minutes" "hours" "days" "weeks" "months" "years"] "ago")
  #from_now(Numeric ["seconds" "minutes" "hours" "days" "weeks" "months" "years"] "from now")
  .piece(["second" "minute" "hour" "day" "week" "month" "year"])::Numeric
  .adjust(["+", "-"], Duration|Numeric)
  .add(Numeric ["seconds" "minutes" "hours" "days" "weeks" "months" "years"])
  .subtract(Numeric ["seconds" "minutes" "hours" "days" "weeks" "months" "years"])
  .round("TO" ["beginning" "end" "nearest"] "OF" ["minute" "hour" "day" "week" "month" "year"])
  .format(String)::String
[Hash]
  #new(content(Keyval [Keyval.new]))
  #parse(Text)
  #keyval(String ": " Any)::Keyval
  .length::Numeric
  .merge(Hash)
  .keys::Array
  .key?(String)::Boolean
  .splat(content([Keyword.ItemKey]))
  .dig(content(String|Numeric [String.new Numeric.new]))::Any
  .get(String)::Any
  .set!(String "=" Any)
  .setData!(content(Keyval [Keyval.new]))
  .del!(String)
  .filter(enum_content)::Hash
  .each(enum_content)
  .map(enum_content)::Array
  .any?(enum_content)::Boolean
  .none?(enum_content)::Boolean
  .all?(enum_content)::Boolean
[Array]
  #new(content)
  #from_length(Numeric)
  .length::Numeric
  .combine(Array)
  .splat(content([Keyword.Item]))
  .get(Numeric)::Any
  .set(Numeric "=" Any)
  .set!(Numeric "=" Any)
  .del!(Numeric)
  .dig(content(String|Numeric [String.new Numeric.new]))::Any
  .pop!::Any
  .push(Any)
  .push!(Any)
  .shift!::Any
  .unshift!(Any)
  .unshift(Any)
  .shuffle
  .each(enum_content)
  .select(enum_content)::Array
  .map(enum_content)
  .find(enum_content)::Any
  .include?(Any)::Boolean
  .first::Any
  .last::Any
  .any?(enum_content)::Boolean
  .none?(enum_content)::Boolean
  .all?(enum_content)::Boolean
  .reverse()
  .reverse!()
  .uniq(g)
  .uniq!(g)
  .sort_by(enum_content)
  .sort_by!(enum_content)
  .sort(["Ascending" "Descending" "Reverse" "Random"])
  .sort!(["Ascending" "Descending" "Reverse" "Random"])
  .sample::Any
  .min::Any
  .max::Any
  .sum::Any
  .join(String)::String
[List]
  #find(String:Name)
  #list_add(String:List String:Item)
  #list_remove(String:List String:Item)
  !#search(String)::Array
  !#create(String)
  .name::String
  !.update(String?:"Name")::Boolean
  !.destroy::Boolean
  .add(String)::Boolean
  .remove(String)::Boolean
  .items::Array
  .has_item?(String)::Boolean
*[ListItem]
  !#find(String|Numeric)
  !#search(String)::Array # All items belonging to user through user lists
  !.update(String?:"Name" String?:"Notes" Hash?:"Data")::Boolean
  !.name::String
  !.notes::String
  !.data::Hash
  !.destroy::Boolean
[ActionEvent]
  #find(String|Numeric)
  #search(Text "limit" Numeric(50) TAB "order" ["DESC" "ASC"])::Array
  #create(content(ActionEventData))
  #add(String)
  .id::Numeric
  .name::String
  .notes::String
  .data::Hash
  .timestamp::Date
  .update!(content(ActionEventData))
  .destroy::Boolean
*[ActionEventData]
  #name(String)
  #notes(String)
  #timestamp(Date)
  #data(content(Hash|Keyval))
[Prompt] # Need to fix these create/update
  #find(String|Numeric)
  #all("complete?" Boolean(false))::Array
  #create("Title" TAB String BR "Data" TAB Hash? BR "Questions" content(PromptQuestion) "Deliver" BR Boolean(true))
  !.update("Title" TAB String BR "Data" TAB Hash? BR "Questions" content(PromptQuestion))::Boolean
  !.destroy::Boolean
  !.deliver::Boolean
*[PromptQuestion]
  #text(String:"Question Text" BR "Default" String)
  #checkbox(String:"Question Text" BR "Default" Boolean)
  #choices(String:"Question Text" content(String))
  #scale(String:"Question Text" BR Numeric(0):"Min" Numeric(100):"Max" Numeric?(50):"Default")
*[Task]
  !#find(String|Numeric)
  !#search(String)::Array
  !.enable(Boolean(true))::Boolean
  !.run(Date?)
[Email]
  #find(String|Numeric)
  !#search(String)::Array
  !#create("To" TAB String BR "Subject" TAB String BR Text "Deliver?" Boolean)
  .to::String
  .from::String
  .subject::String
  .text::String
  .html::String
  .timestamp::Date
  .archive(Boolean(true))::Boolean
[Contact]
  #find(String|Numeric)
  #search(String)::Array
  #create(content(ContactData))
  .name::String
  .nickname::String
  .username::String
  .permitRelay?::Boolean
  .phone::String
  .data::Hash
  .update!(content(ContactData))
  .get(String)::Any
  .set!(String " : " Any)
*[ContactData]
  #name(String)
  #nickname(String)
  #username(String)
  #permitRelay?(Boolean)
  #phone(String)
  #data(content(Hash|Keyval))
[Monitor]
  #loading(String:Name Boolean(true))
  #broadcast(String:Name content(MonitorData) "Loading?" Boolean(false))
  #refresh(String:Name Hash?:Data)
*[MonitorData]
  #content(Text)
  #timestamp(Date|Numeric|Boolean)
  #timestampFormat(["long", "short", "none"])
  #blip(Numeric?)
  #data(Hash)
[Schedule]
  #find(Numeric)
  #search(Text("*"))::Array # Using listener syntax trigger:word::data
  #create(content(ScheduleData))
  .update!(content(ScheduleData))
  .cancel!::Boolean
  .id::Numeric # String or Numeric?
  .name::String
  .executeAt::Date
  .trigger::String
  .data::Hash
*[ScheduleData]
  #name(String)
  #executeAt(Date)
  #trigger(String)
  #data(content(Hash|Keyval))
